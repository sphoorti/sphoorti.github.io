<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Sphoorti Joglekar</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://sphoorti.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://sphoorti.github.io" />
<updated>2015-10-25T21:34:30+05:30</updated>
<id>http://sphoorti.github.io/</id>
<author>
  <name>Sphoorti Joglekar</name>
  <uri>http://sphoorti.github.io/</uri>
  <email>sphoorti.joglekar@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Importing CAcert Certificates in Android.]]></title>
  <link rel="alternate" type="text/html" href="http://sphoorti.github.io/blog/moVirt_3/" />
  <id>http://sphoorti.github.io/blog/moVirt_3</id>
  <published>2015-02-21T17:38:50+05:30</published>
  <updated>2015-02-21T17:38:50+05:30</updated>
  <author>
    <name>Sphoorti Joglekar</name>
    <uri>http://sphoorti.github.io</uri>
    <email>sphoorti.joglekar@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;installing-cacert-certificates-as&quot;&gt;Installing CAcert certificates as&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;‘user-trusted’ certificates&lt;/strong&gt; is very easy, however, it has one limitation. Use of ‘User-trusted’ certificates forces the user to implement additional safety measures like using a PIN-code or pattern lock or a password to unlock the device.   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;‘system-trusted ‘ certificates&lt;/strong&gt; is slightly tedious. The user needs to have root access to the android device. But with this approach, the user can get rid of the lockscreen requirement.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;on-the-android-device&quot;&gt;On the Android device&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;‘user-trusted’ certificates&lt;/strong&gt; - are found in &lt;strong&gt;Settings -&amp;gt; Security -&amp;gt; Certificates -&amp;gt; ‘User’&lt;/strong&gt; section. Using a file manager, you can find them at ‘/data/misc/keychain/certs-added’ as read-only files.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;‘system-trusted ‘ certificates&lt;/strong&gt; - are found in &lt;strong&gt;Settings -&amp;gt; Security -&amp;gt; Certificates -&amp;gt; ‘System’&lt;/strong&gt; section. Using a file manager, you can find them at ‘/system/etc/security/’ as files with read-only format.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;user-trusted-certificate&quot;&gt;‘user-trusted’ certificate:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;root.crt&lt;/strong&gt; and &lt;strong&gt;class3.crt&lt;/strong&gt;. Download them onto the internal flash storage ( /sdcard/ folder ).  &lt;/li&gt;
  &lt;li&gt;Browse to the directory using a file manager and click on the root.crt.The file will be opened by the Certificate Manager and prompt you for the name of the newly imported certificate.  &lt;/li&gt;
  &lt;li&gt;At this juncture, the Android Security Model will propmt you to use a lock-screen mechanism if it is the first time that you are using a’user-trusted’ certificate.  &lt;/li&gt;
  &lt;li&gt;Once the root.crt is installed, follow the same steps for class3.crt.  &lt;/li&gt;
  &lt;li&gt;Confirm that both the certicates are successfully installed on your device.  &lt;/li&gt;
  &lt;li&gt;Reboot your device.  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;system-trusted-certificate&quot;&gt;‘system-trusted’ certificate:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Apart from overcoming the limitation of a lock-screen, ‘system-trusted’ certificates help you protect your device from tampering by malicious applications.  &lt;/li&gt;
  &lt;li&gt;A rooted android device or temporary root access to your device and a system with openssl software installed on it.  &lt;/li&gt;
  &lt;li&gt;Get the CAcert root certificates from the &lt;a href=&quot;https://www.cacert.org/index.php?id=3&quot;&gt; cacert.org website.&lt;/a&gt; Download the root certificate PEM format (root.crt) and the Class 3 PKI key in PEM format (class3.crt)  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get the hash of the root.crt certificate:  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; openssl x509 -inform PEM -subject_ hash_ old -in root.crt | head -1  
 cat root.crt &amp;gt; &amp;lt;i&amp;gt;hashValue&amp;lt;/i&amp;gt;.0   
 openssl x509 -inform PEM -text -in root.crt -out /dev/null &amp;gt;&amp;gt; &amp;lt;i&amp;gt;hashValue&amp;lt;/i&amp;gt;.0  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Follow the same steps for class3.crt.  &lt;/li&gt;
  &lt;li&gt;Check the md5sum of the newly created Android compatible certificate files using the md5sum command.  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once done, use adb shell to create the ‘system-trusted’ certificates.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; su  
 mount -o remount,rw /system  
 cp /sdcard/&amp;lt;i&amp;gt;hashValue&amp;lt;/i&amp;gt;.0 /system/etc/security/cacerts/  
 cp /sdcard/&amp;lt;i&amp;gt;hashValue&amp;lt;/i&amp;gt;.0 /system/etc/security/cacerts/  
 cd /system/etc/security/cacerts/  
 chmod 644 5ed36f99.0  
 chmod 644 e5662767.0  
 reboot  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;After reboot, verify that the certificates are successfully installed on your device.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; If things dont go well in this approach, make sure no user certificates are installed (Settings -&amp;gt; Security -&amp;gt; Clear certificates) and also  &quot;Clear/delete credentials&quot; (in Settings -&amp;gt; Security). &lt;/p&gt;

&lt;h5 id=&quot;note-that-the--subject-hash-old-parameter-will-depend-on-the-openssl-software-version&quot;&gt;Note that the -subject_ hash_ old parameter will depend on the openssl software version.&lt;/h5&gt;

&lt;p&gt;For &lt;strong&gt;Android GingerBread and Froyo&lt;/strong&gt; follow this comprehensive guide &lt;a href=&quot;http://wiki.cacert.org/FAQ/ImportRootCertAndroidPreICS&quot;&gt;Import CAcert root certificate into Android pre-Ice Cream Sandwich&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://sphoorti.github.io/blog/moVirt_3/&quot;&gt;Importing CAcert Certificates in Android.&lt;/a&gt; was originally published by Sphoorti Joglekar at &lt;a href=&quot;http://sphoorti.github.io&quot;&gt;Sphoorti Joglekar&lt;/a&gt; on February 21, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Android Studio 101.]]></title>
  <link rel="alternate" type="text/html" href="http://sphoorti.github.io/blog/moVirt_2/" />
  <id>http://sphoorti.github.io/blog/moVirt_2</id>
  <published>2015-01-06T17:38:50+05:30</published>
  <updated>2015-01-06T17:38:50+05:30</updated>
  <author>
    <name>Sphoorti Joglekar</name>
    <uri>http://sphoorti.github.io</uri>
    <email>sphoorti.joglekar@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;A list of shortcuts to get started with Android Studio.    &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + Space Bar&lt;/strong&gt; - Useful for autocompletion.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + ALT + B&lt;/strong&gt; - When the cursor is on class or interface, tells who is implementing / inheriting the class / interface.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + Click&lt;/strong&gt; - Takes the cursor to the declaration of the thing that is clicked.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + F12&lt;/strong&gt; - Lists the methods defined in the class.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + N&lt;/strong&gt; - Opens the class / interface according to the name entered in dialog box. One can write only the subparts of the name in there.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + SHIFT + N&lt;/strong&gt; - Opens a &lt;em&gt;resource&lt;/em&gt;. The resource could be a .xml file or property file or generated code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SHIFT + SHIFT&lt;/strong&gt; - The &lt;em&gt;Search Everywhere&lt;/em&gt; option. It literally searches everywhere :D  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + ALT + O&lt;/strong&gt; - Organize imports. This also removes the imports not used in the class and introduces the ones you need.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Highlight some code block and press &lt;strong&gt;CTRL + ALT + L&lt;/strong&gt; -  Reformats the code.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following are a couple of shortcuts useful while debugging the code.  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CTRL + F8&lt;/strong&gt; - Introduce a breakpoint.&lt;br /&gt;
The red dot with a down arrow indicates the debugger is connected with the app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;F8&lt;/strong&gt; - Evaluate and continue debugging.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ALT + F8&lt;/strong&gt;  - Evaluate the expression.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;F9&lt;/strong&gt; - Continue  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;F7&lt;/strong&gt; - Step in  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SHIFT + F8&lt;/strong&gt; - Step out  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Watch out for this space. I shall keep updating this list with shortcuts that will simplify use of Android Studio.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://sphoorti.github.io/blog/moVirt_2/&quot;&gt;Android Studio 101.&lt;/a&gt; was originally published by Sphoorti Joglekar at &lt;a href=&quot;http://sphoorti.github.io&quot;&gt;Sphoorti Joglekar&lt;/a&gt; on January 06, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[moVirt, OPW and me.]]></title>
  <link rel="alternate" type="text/html" href="http://sphoorti.github.io/blog/moVirt_1/" />
  <id>http://sphoorti.github.io/blog/moVirt_1</id>
  <published>2014-12-09T17:38:50+05:30</published>
  <updated>2014-12-09T17:38:50+05:30</updated>
  <author>
    <name>Sphoorti Joglekar</name>
    <uri>http://sphoorti.github.io</uri>
    <email>sphoorti.joglekar@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;My journey with moVirt began in the first week of October when I saw oVirt as a mentoring organization on the &lt;a href=&quot;http://www.gnome.org/opw/&quot;&gt;Gnome OPW&lt;/a&gt; page.The moVirt project caught up my interest and I immediately contacted the project mentor Tomas Jelinek asking questions regarding how I should proceed with the application process.A long journey setting the development environment up and creating the first contribution started. Here is how it went  &lt;/p&gt;

&lt;h4 id=&quot;my-opw-project--emenhancements-to-movirtem&quot;&gt;My OPW project:- &lt;em&gt;Enhancements to moVirt.&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;moVirt is an android application to manage and monitor oVirt’s datacentres.  &lt;/p&gt;

&lt;h4 id=&quot;my-first-contribution-&quot;&gt;My first contribution:-&lt;/h4&gt;
&lt;p&gt;Since my OPW project is making enhancements to moVirt, I needed the development environment up and running and because there was no description how to do it, I decided that documenting the process of setting it up would be a good first contribution.I had Eclipse Kepler with android SDK installed on my machine, so I imported the cloned project in Eclipse.However, things went a little awry with this development environment.The .apk file on the github repository worked fine for me as against the one generated in my eclipse environment. My mentor asked me to compare both the .apk files. On comparison, we found that the Android Annotations framework was missing and I needed to configure it. Even after setting up the framework, the project would always break. After a discussion with the moVirt devels I decided to try using Android Studio and things worked for me. On deeper analysis, I realized that moVirt is a Gradle project and I hadn’t configured the right environment on Eclipse for it to work. Android Studio being gradle based, makes moVirt development easier.&lt;br /&gt;
Once I had the entire development setup functional, I made my &lt;a href=&quot;https://github.com/matobet/moVirt/blob/master/README.md&quot;&gt;first contribution&lt;/a&gt;.  &lt;/p&gt;

&lt;h4 id=&quot;tools-i-learned-about-&quot;&gt;Tools I learned about:-&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.adventuresofanentrepreneur.net/creating-a-mobile-appsgames-company/how-to-unpack-pack-an-apk-file&quot;&gt;APKTool.&lt;/a&gt; This tool is used to unpack/pack the apk files.   &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/sdk/installing/index.html?pkg=studio&quot;&gt;Android Studio.&lt;/a&gt; The development IDE used for moVirt.  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;it is a live image which contains everything you need to start playing around with oVirt&quot;&gt;oVirt_Live.&lt;/a&gt;  It is a live image which contains everything you need to start playing around with oVirt.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git Basics.&lt;/a&gt; Helps understanding git better.  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;get-in-touch&quot;&gt;Get in Touch&lt;/h3&gt;
&lt;p&gt;Contribute to &lt;a href=&quot;https://github.com/matobet/movirt&quot;&gt;moVirt on github&lt;/a&gt;&lt;br /&gt;
Stay updated with news. Follow &lt;a href=&quot;https://twitter.com/mobileOvirt&quot;&gt;@mobileOvirt&lt;/a&gt; on Twitter.&lt;br /&gt;
Find &lt;em&gt;tjelinek&lt;/em&gt;, &lt;em&gt;mbetkak&lt;/em&gt; or &lt;em&gt;sphoorti&lt;/em&gt; on &lt;em&gt;#ovirt&lt;/em&gt; on &lt;em&gt;irc.oftc.net&lt;/em&gt; and have a chat :)  &lt;/p&gt;

&lt;p&gt;Looking forward for an amazing OPW experience with Tomas and oVirt community.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://sphoorti.github.io/blog/moVirt_1/&quot;&gt;moVirt, OPW and me.&lt;/a&gt; was originally published by Sphoorti Joglekar at &lt;a href=&quot;http://sphoorti.github.io&quot;&gt;Sphoorti Joglekar&lt;/a&gt; on December 09, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Setting up DevStack with Neutron]]></title>
  <link rel="alternate" type="text/html" href="http://sphoorti.github.io/blog/devstack_setup/" />
  <id>http://sphoorti.github.io/blog/devstack_setup</id>
  <published>2014-03-29T17:38:50+05:30</published>
  <updated>2014-03-29T17:38:50+05:30</updated>
  <author>
    <name>Sphoorti Joglekar</name>
    <uri>http://sphoorti.github.io</uri>
    <email>sphoorti.joglekar@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Devstack is an All-In-One shell script widely used by OpenStack-devs to build a complete OpenStack development environment. It is advisable to install DevStack on a
virtual machine and take periodic snapshots of the VM. When things go messy, you can easily revert back to a working snapshot!&lt;/p&gt;

&lt;h4 id=&quot;prerequisites-&quot;&gt;Prerequisites :&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Linux_Downloads&quot;&gt;Install VirtualBox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download the &lt;a href=&quot;http://archive.ubuntu.com/ubuntu/dists/precise/main/installer-amd64/current/images/netboot/mini.iso&quot;&gt;minimal ubuntu iso&lt;/a&gt; for Ubuntu 12.04. All other
additional dependencies will be installed during DevStack setup.&lt;/li&gt;
  &lt;li&gt;Create a new VM having a minimum requirement of 2 GB RAM and 20 GB of storage.&lt;/li&gt;
  &lt;li&gt;After the VM is successfully created, run the following commands in terminal :-
    &lt;ol&gt;
      &lt;li&gt;$ sudo apt-get update&lt;/li&gt;
      &lt;li&gt;$ sudo apt-get install git&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;after-the-initial-setup-its-time-to-install-devstack-&quot;&gt;After the initial setup, its time to install DevStack !&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Clone the DevStack repository :-$ git clone git://git.openstack.org/openstack-dev/devstack   &lt;/li&gt;
  &lt;li&gt;Switch to the cloned devstack directory :- $ cd devstack  &lt;/li&gt;
  &lt;li&gt;Run the following command :-  devstack$ cp /samples/local.conf local.conf  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the local.conf file and edit the password fields and add neutron to enabled services      &lt;/p&gt;

    &lt;p&gt;ADMIN_PASSWORD=password&lt;br /&gt;
 MYSQL_PASSWORD=password&lt;br /&gt;
 RABBIT_PASSWORD=password&lt;br /&gt;
 SERVICE_PASSWORD=password&lt;br /&gt;
 SERVICE_TOKEN=password    &lt;/p&gt;

    &lt;p&gt;disable_service n-net&lt;br /&gt;
 ENABLED_SERVICES+=,q-svc,q-agt,q-dhcp,q-l3,q-meta,neutron        &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now run the shell script to setup DevStack development environment. devstack$ ./stack.sh&lt;br /&gt;
 &lt;em&gt;The script takes a while to complete.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;if-stacksh-fails-with-following-error-&quot;&gt;If stack.sh fails with following error :&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;2014-03-28 20:39:57.007 | E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)  
2014-03-28 20:39:57.009 | E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?  
2014-03-28 20:39:57.016 | ++ err_trap  
2014-03-28 20:39:57.018 | ++ local r=100  
2014-03-28 20:39:57.019 | stack.sh failed: full log in /opt/stack/logs/stack.sh.log.2014-03-28-203740  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error usually occurs when the ubuntu package manager is running in background. A workaround for this is :-  &lt;br /&gt;
    $ sudo fuser -v /var/lib/dpkg/lock      &lt;/p&gt;

&lt;h5 id=&quot;on-successful-installation-you-ll-be-prompted-to-relevant-urls-accounts-and-passwords&quot;&gt;On successful installation, you ll be prompted to relevant URLs, accounts and passwords!&lt;/h5&gt;

&lt;h4 id=&quot;running-unit-tests-for-neutron-&quot;&gt;Running unit tests for neutron :&lt;/h4&gt;

&lt;p&gt;The tests folder can be found at /opt/stack/neutron/neutron/. The tests are categorized mainly as :-    &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Unit Tests - The source code is divided into small modules and each module is tested independently to ensure that the module conforms to its intended behavior.
Mock objects are used to test the modules in isolation.&lt;br /&gt;
You could take a look at the &lt;a href=&quot;http://python-mock.sourceforge.net/&quot;&gt;Python Mock Module&lt;/a&gt;.    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Functional Tests - These tests describe &lt;em&gt;what&lt;/em&gt; the software &lt;em&gt;structure&lt;/em&gt; actually does by validating the output based on the given input.      &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The tests can be run using the ./run_tests.sh script or using tox or nose . Tox creates a virtual environment for running the tests cases. It uses &lt;code&gt;Testr&lt;/code&gt;_ for
managing the running of the test cases.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;/opt/stack/neutron/$ :- ./run_tests.sh -V&lt;br /&gt;
The script runs all the tests from the root source directory.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;/opt/stack/neutron/$ :- tox -e py27&lt;br /&gt;
This runs all the unit tests for python 2.7 version dependencies.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These tests take a lot of time to run!&lt;/p&gt;

&lt;h5 id=&quot;emi-individual-tests-can-also-be-run-using-the-following-syntax--emi&quot;&gt;&lt;em&gt;&lt;i&gt; Individual tests can also be run using the following syntax. :-&amp;lt;/em&amp;gt;&lt;/i&gt;&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;./run_tests.sh  neutron.tests.unit.test _wsgi&lt;/p&gt;

&lt;h5 id=&quot;using-tox--&quot;&gt;Using tox :-&lt;/h5&gt;

&lt;p&gt;tox -e py27  neutron.tests.unit.test_wsgi     &lt;/p&gt;

&lt;p&gt;The &lt;i&gt;pep8&lt;/i&gt; tests can be run using tox as follows:    &lt;/p&gt;

&lt;p&gt;tox -e pep8 neutron.tests.unit.test_wsgi  &lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://sphoorti.github.io/blog/devstack_setup/&quot;&gt;Setting up DevStack with Neutron&lt;/a&gt; was originally published by Sphoorti Joglekar at &lt;a href=&quot;http://sphoorti.github.io&quot;&gt;Sphoorti Joglekar&lt;/a&gt; on March 29, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[ Connecting the BeagleBone Black to the internet]]></title>
  <link rel="alternate" type="text/html" href="http://sphoorti.github.io/blog/BBB_netaccess/" />
  <id>http://sphoorti.github.io/blog/BBB_netaccess</id>
  <published>2014-02-27T17:38:50+05:30</published>
  <updated>2014-02-27T17:38:50+05:30</updated>
  <author>
    <name>Sphoorti Joglekar</name>
    <uri>http://sphoorti.github.io</uri>
    <email>sphoorti.joglekar@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I had a hard time connecting the BeagleBone Black to the internet while I was working from Fedora 19. The tutorials for other Linux distros were pretty straight forward. After having pondered over it for a day or two I finally managed to access internet from the Black. Special credits to &lt;a href=&quot;http://www.linkedin.com/pub/gaurav-jain/1b/125/2b3&quot;&gt;Gaurav Jain&lt;/a&gt; :D.&lt;/p&gt;

&lt;p&gt;So here is what I did,      &lt;/p&gt;

&lt;p&gt;SSH to your Black using &lt;em&gt;ssh root@192.168.7.2&lt;/em&gt;. Once this is done run the following commands from the beaglebone shell.   &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;root@beaglebone:/ # /sbin/route add default gw 192.168.7.1&lt;/li&gt;
  &lt;li&gt;root@beaglebone:/ # echo “nameserver 8.8.8.8” » /etc/resolv.conf&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;On the host Linux Machine except Fedora:&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;sudo iptables -A POSTROUTING -t nat -j MASQUERADE  &lt;/p&gt;

    &lt;p&gt;This instruction enables the masquerading option allowing any device in the subnet to act on behalf of the host machine. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;sudo echo 1&lt;/td&gt;
          &lt;td&gt;sudo tee /proc/sys/net/ipv4/ip_forward &amp;gt; /dev/null&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;This instruction enables the ipv4 forwarding providing the beaglebone with access to the internet.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;On a Fedora machine instead of above two intsructions:&lt;/strong&gt;    &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open Firewall settings.    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select zone as public.    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the side tab panel select masquerading    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enable Masquerade zones.    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Switch back to the BeagleBone Black terminal&lt;/strong&gt;    &lt;br /&gt;
root@beaglebone:/ # ping google.com  &lt;br /&gt;
&lt;em&gt;A successful ping implies beaglebone black now  has internet access.&lt;/em&gt;    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go ahead and update your Black!&lt;/strong&gt;     &lt;br /&gt;
	root@beaglebone:/ # opkg update  &lt;br /&gt;
&lt;em&gt;(opkg is the package manager for the BeagleBone Black.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Also here is one nice tutorial for getting a hands on with the BBB &lt;a href=&quot;https://github.com/anujdeshpande/BBB-workshop&quot;&gt;BBB-Workshop by Anuj Deshpande&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://sphoorti.github.io/blog/BBB_netaccess/&quot;&gt; Connecting the BeagleBone Black to the internet&lt;/a&gt; was originally published by Sphoorti Joglekar at &lt;a href=&quot;http://sphoorti.github.io&quot;&gt;Sphoorti Joglekar&lt;/a&gt; on February 27, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>